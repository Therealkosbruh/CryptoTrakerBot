import * as dotenv from 'dotenv';
import express, { Application, Request, Response } from 'express';
import cors from 'cors';
import { fetchAndStoreCryptoData } from "./services/cryptoService";
import { PrismaClient } from '@prisma/client';

dotenv.config();

const app: Application = express();
const PORT = process.env.PORT || 5000;
const prisma = new PrismaClient();

app.use(cors());
app.use(express.json());

app.get("/cryptos", async (req: Request, res: Response) => {
    try {
        const cryptos = await prisma.crypto.findMany();
        res.json(cryptos);
    } catch (error) {
        console.error("Error getting cryptolist:", error);
        res.status(500).json({ error: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${error}` });
    }
});

app.post(
    "/subscribe",
    async (req: Request, res: Response): Promise<void> => {
        const { userId, cryptoId } = req.body;

        if (!userId || !cryptoId) {
            res.status(400).json({ error: "userId –∏ cryptoId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
            return;
        }

        try {
            const existingSubscription = await prisma.subscription.findFirst({
                where: {
                    userId: Number(userId),
                    cryptoId: Number(cryptoId),
                },
            });

            if (existingSubscription) {
                res.status(400).json({ error: "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –≤–∞–ª—é—Ç—É" });
                return;
            }

            const subscription = await prisma.subscription.create({
                data: { userId: Number(userId), cryptoId: Number(cryptoId) },
            });

            res.json(subscription);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
            res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
    }
);

app.get("/update-crypto", async (req: Request, res: Response) => {
    try {
        await fetchAndStoreCryptoData();
        res.status(200).json({ message: "–î–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

app.listen(PORT, () => {
    console.log(`üöÄ Server is running on http://localhost:${PORT}`);
});



